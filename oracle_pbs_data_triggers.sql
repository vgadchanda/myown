-- Generated by Ora2Pg, the Oracle database Schema converter, version 19.1
-- Copyright 2000-2018 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=localhost;sid=orcl;port=1521

SET client_encoding TO 'UTF8';

SET search_path = pbs_data;
\set ON_ERROR_STOP ON

DROP TRIGGER IF EXISTS trpr_dataadm ON pr_data_admin CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_trpr_dataadm() RETURNS trigger AS $BODY$
DECLARE

--
-- $Id$
--
-- Copyright (c) 2012  Pegasystems Inc.
-- All rights reserved.
--
-- This  software  has  been  provided pursuant  to  a  License
-- Agreement  containing  restrictions on  its  use.   The  software
-- contains  valuable  trade secrets and proprietary information  of
-- Pegasystems Inc and is protected by  federal   copyright law.  It
-- may  not be copied,  modified,  translated or distributed in  any
-- form or medium,  disclosed to third parties or used in any manner
-- not provided for in  said  License Agreement except with  written
-- authorization from Pegasystems Inc.
--
--
-- Name: trpr_dataadm
--
-- Trigger to gather all updates to the pr_data_admin table.
--
SPtpxSystemName		varchar(32);
SPtpxNodeName		varchar(32);
SPtpzInsKey			varchar(255);
SPtpzObjClass		varchar(64);
SPtpzParameters		varchar(160);
SPtpyRuleSet		varchar(128);


validTrigger		boolean;

tblVarchar varchar(64);
SPCachedDI type tblVarchar :=tblVarchar(
		'Data-Admin-Operator-AccessGroup',
		'Data-Admin-Calendar',
		'Data-Admin-OrgDivision',
		'Data-Admin-StartingFlows',
		'Data-Admin-System-WorkSource-Application',
		'Data-Admin-WorkGroup',
		'Data-Admin-WebServices-Policy',
		'Data-Admin-ServicePackage',
		'Data-Admin-AppID',
		'Data-Admin-Organization',
		'Data-Admin-OrgUnit',
		'Data-Admin-System-Security',
		'Data-Admin-Security-OAuth-Client-AccessToken',
		'Data-Admin-WorkBasket',
		'Data-Admin-ServiceType',
		'Data-Admin-Security-AuthenticationProfile',
		'Data-Admin-RequestProcessor-Service',
		'Data-Admin-RequestProcessor-Connect',
		'Data-Admin-Security-WSSecurityProfile',
		'Data-Admin-System-SecurityPolicy',
		'Data-Admin-System-Targets',
		'Data-Admin-System-WorkSource',
		'Data-Admin-System-Settings',
		'Data-Admin-System'
	);

BEGIN

validTrigger := false;

IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') AND (NEW.pxObjClass MEMBER OF SPCachedDI) THEN
	validTrigger 	:= true;
	SPtpzInsKey 	:= NEW.pzInsKey;
	SPtpzObjClass 	:= NEW.pxObjClass;
	SPtpxNodeName 	:= NULL;
	SPtpyRuleSet 	:= NEW.pyRuleSetName;
	SPtpzParameters := 'false&'||'pyRuleSet=' || SPtpyRuleSet;
ELSIF TG_OP = 'DELETE' AND (OLD.pxObjClass MEMBER OF SPCachedDI) THEN
	validTrigger 	:= true;
	SPtpzInsKey 	:= OLD.pzInsKey;
	SPtpzObjClass 	:= OLD.pxObjClass;
	SPtpxNodeName 	:= NULL;
	SPtpyRuleSet 	:= OLD.pyRuleSetName;
	SPtpzParameters := 'true&'||'pyRuleSet=' || SPtpyRuleSet;
END IF;

IF validTrigger THEN
	INSERT INTO PBS_DATA.pr_sys_updatescache(
		pzKeyString,
		pzCreateDateTime,
		pzClearCacheType,
		pzNodeName,
		pzSystemName,
		pzObjClass,
		pzParameters
	)
	VALUES (
		SPtpzInsKey,
		LOCALTIMESTAMP,
		'Cache',
		SPtpxNodeName,
		SPtpxSystemName,
		SPtpzObjClass,
		SPtpzParameters
	);
	
END IF;
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_trpr_dataadm() FROM PUBLIC;

CREATE TRIGGER trpr_dataadm
	AFTER INSERT OR UPDATE OR DELETE ON pr_data_admin FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_trpr_dataadm();

